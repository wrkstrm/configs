# Guard against multiple inclusions (shim + embedded block)
if [[ -n ${WRKSTRM_ZSHIFT_SOURCED:-} ]]; then
  return 0
fi
typeset -g WRKSTRM_ZSHIFT_SOURCED=1

zshift_team_template() {
  emulate -L zsh
# Team zsh template with fast/human split.
# See .wrkstrm/clia/swift_test_engineer_AGENCY.md (2025-09-11) for policy.
zmodload zsh/datetime

# Record the start time (human shells will show load time)
start_time=$EPOCHREALTIME

############################
# 1) FAST, REPRODUCIBLE CORE
############################

# PATH normalization (user bins, Homebrew if present, system bins)
[[ -d "$HOME/bin" ]] && PATH="$HOME/bin:$PATH"
[[ -d "$HOME/.local/bin" ]] && PATH="$HOME/.local/bin:$PATH"
[[ -d /usr/local/bin ]] && PATH="/usr/local/bin:$PATH"
[[ -d /opt/homebrew/bin ]] && PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
[[ -d "$HOME/.swiftpm/bin" ]] && PATH="$PATH:$HOME/.swiftpm/bin"
# LM Studio CLI (if installed)
[[ -d "$HOME/.cache/lm-studio/bin" ]] && PATH="$PATH:$HOME/.cache/lm-studio/bin"
export PATH

# Color is handled by OMZ themes; no extra color env/aliases.

# History (conservative; human layer can extend)
export HISTSIZE=${HISTSIZE:-10000}
export SAVEHIST=${SAVEHIST:-10000}
export HISTFILE=${HISTFILE:-$HOME/.zsh_history}
setopt HIST_IGNORE_ALL_DUPS HIST_FIND_NO_DUPS

# Oh My Zsh path only (load later in human interactive)
export ZSH="${ZSH:-$HOME/.oh-my-zsh}"

# Fast mode detection: CI or non‑TTY or explicit flag
WRKSTRM_IS_INTERACTIVE=0
[[ $- == *i* ]] && WRKSTRM_IS_INTERACTIVE=1
if [[ -n ${WRKSTRM_FAST_SHELL:-} ]]; then
  WRKSTRM_FAST_MODE=$WRKSTRM_FAST_SHELL
else
  if [[ -n ${CI:-} || ! -t 1 ]]; then WRKSTRM_FAST_MODE=1; else WRKSTRM_FAST_MODE=0; fi
fi

if [[ $WRKSTRM_FAST_MODE == 1 ]]; then
  return 0
fi

####################################
# 2) HUMAN (NON‑INTERACTIVE) LAYERS
####################################

# OMZ plugin list (base + optional if present). Loaded only in interactive step.
ZSH_CUSTOM=${ZSH_CUSTOM:-$ZSH/custom}
_has_plugin() { [[ -d "$ZSH/plugins/$1" || -d "$ZSH_CUSTOM/plugins/$1" ]]; }

# Base plugins
plugins=(git history-substring-search)

# Optional plugins
typeset -a _omz_extras=()
# Autosuggestions if installed under OMZ custom
if _has_plugin zsh-autosuggestions; then _omz_extras+=(zsh-autosuggestions); fi
# Xcode on macOS when OMZ plugin exists
if [[ "$OSTYPE" == darwin* ]] && _has_plugin xcode; then _omz_extras+=(xcode); fi
# VS Code when plugin exists and `code` is available
if _has_plugin vscode && command -v code >/dev/null 2>&1; then _omz_extras+=(vscode); fi

# Compose final list ensuring zsh-syntax-highlighting remains last when present
plugins=(${plugins[@]} ${_omz_extras[@]})
if _has_plugin zsh-syntax-highlighting; then plugins+=(zsh-syntax-highlighting); fi

# OMZ update cadence and general tuning
zstyle ':omz:update' mode auto
zstyle ':omz:update' frequency 1
export CASE_SENSITIVE="true"
export COMPLETION_WAITING_DOTS="true"
export DISABLE_UNTRACKED_FILES_DIRTY="true"
setopt prompt_subst

################################
# 3) HUMAN INTERACTIVE ENHANCERS
################################

if [[ $WRKSTRM_IS_INTERACTIVE == 1 ]]; then
  # Interactive: if zshift is available, announce theme with figlet and set ZSH_THEME
  if command -v zshift >/dev/null 2>&1; then
    _zsout=$(zshift random --emit prefixed 2>/dev/null || true)
    # Print banner while hiding the metadata lines (last two lines)
    if [[ -n $_zsout ]]; then
      print -r -- "$_zsout" | sed '$d' | sed '$d'
    fi
    # Extract font and theme from the last two lines
    _zsfont=$(print -r -- "$_zsout" | tail -n 2 | head -n 1 | sed 's/FIGLET_FONT=//')
    _zstheme=$(print -r -- "$_zsout" | tail -n 1 | sed 's/.*ZSH_THEME=//')
    [[ -n $_zstheme ]] && export ZSH_THEME="$_zstheme"
    # Echo canonical identifiers so users can like/exclude them easily
    if [[ -n $_zsfont ]]; then
      print -r -- "FIGLET_FONT=$_zsfont"
    fi
    if [[ -n $_zstheme ]]; then
      print -r -- "ZSH_THEME=$_zstheme"
    fi
  fi

  # Motivational quote from CLIA (Apple Intelligence) on macOS 26 interactive shells only
  if [[ "$OSTYPE" == darwin* ]]; then
    if [[ -z ${WRKSTRM_MACOS_MAJOR:-} ]]; then
      WRKSTRM_MACOS_MAJOR=$(sw_vers -productVersion 2>/dev/null | cut -d'.' -f1)
    fi
    if [[ ${WRKSTRM_MACOS_MAJOR:-0} -ge 26 ]] && command -v clia >/dev/null 2>&1; then
      _clia_quote_json=$(clia chat --provider apple \
        --prompt 'Share a short motivational quote for today.' \
        --one-shot-output json --no-banner 2>/dev/null || true)
      if [[ -n $_clia_quote_json ]]; then
        _clia_quote_provider=$(print -r -- "$_clia_quote_json" |
          plutil -extract provider.displayName raw - 2>/dev/null || true)
        _clia_quote_text=$(print -r -- "$_clia_quote_json" |
          plutil -extract answer.text raw - 2>/dev/null || true)
        if [[ -n $_clia_quote_provider ]]; then
          print -r -- "$_clia_quote_provider"
        fi
        if [[ -n $_clia_quote_text ]]; then
          print -r -- "$_clia_quote_text"
        fi
      fi
    fi
  fi

  # Load OMZ once with the chosen theme
  [[ -f "$ZSH/oh-my-zsh.sh" ]] && source "$ZSH/oh-my-zsh.sh"

  # Handy aliases
  alias zshconfig="code ~/.zshrc"
  alias ohmyzsh="code ~/.oh-my-zsh"
  ztheme() { export ZSH_THEME="$1"; source "$ZSH/oh-my-zsh.sh" 2>/dev/null || true; }

  # (No load-time echo; keep startup silent)
fi
}

zshift_team_template
unset -f zshift_team_template

# Ensure prompt substitutions remain enabled outside the function
setopt prompt_subst
